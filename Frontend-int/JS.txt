1.What is the difference between `==` and `===` in JavaScript?

 	   == Loose Equality, it compares values only.	5=="5"	True-> coz JS covert "5" to number before compare.
 	  === Strictly Equality, Compare values and type.  5==="5"   ->False coz one is number and another is string.

2.What's the difference between a JavaScript variable that is: `null`, `undefined` or undeclared?
 
 	undefined : Variable is declared but value is not assigned yet. JS automatically assigned "undefined"
 			-> undefined → “I exist, but I have no value yet.”

 	null : Variable is assigned as empty or nothing on a purpose. Manually assign "null"
 			-> null → “I exist, and my value is nothing.”

 	Uncleared : Variable is not declared at all in the code. JS doesn't know, it doesn't not exist in memory

 	Example --------->	let x;          // declared but not assigned
 				let y = null;   // declared and intentionally empty

 					console.log(x); // undefined
 					console.log(y); // null
 					console.log(z); // ❌ ReferenceError (undeclared)

3.What's the difference between `.call` and `.apply` in JavaScript?

    .call and .apply are both used to invoke functions with a specific "this" context and arguments.
    i) Pass arguments one by one(Individual)           func.call(thisArg, arg1, arg2, arg3) 
    ii) Pass arguments as an array                     func.apply(thisArg, [arg1, arg2, arg3])

                function greet(greeting, name) {
                console.log(greeting + ", " + name + "!");
                }

                // Using call()
                greet.call(null, "Hello", "Swagat");  
                // Output: Hello, Swagat!

                // Using apply()
                greet.apply(null, ["Hi", "Swagat"]);  
                // Output: Hi, Swagat!

    NOTE : Theses are rarely used - use spread operator:  greet(...["Hey", "Swagat"]); // same as apply()

4.What is the difference between `mouseenter` and `mouseover` event in JavaScript and browsers?

	- Both are mouse events that trigger when the mouse pointer enters an element —
	  but they behave slightly differently when dealing with child elements.

		mouseenter event :  Does not bubble    --->  mouseenter → “Triggers only once, when entering the element itself.”
		mouseover event : Bubbles up the DOM   --->  mouseover → “Triggers many times, even for children.”

5. What are the various data types in JavaScript?
	-  In JavaScript, there are 8 main data types — divided into Primitive and Non-Primitive (Reference) types.

		1. Primitive Data Types:
			
    Number: Represents both integers and floating-point numbers.     42,   3.24
    String: Represents sequences of characters.       'Swagat Murmu'
    Boolean: Represents true or false values.		
    Undefined: A variable that has been declared but not assigned a value.      let user;
    Null: Represents the intentional absence of any object value. 		assign "Null"
    Symbol: A unique and immutable value used as object property keys.		 let sym1 = Symbol();     let sym2 = Symbol('description');  
   BigInt: Represents integers with arbitrary precision.		let bigNumber = BigInt(9007199254740991);

		2.Non-primitive (Reference) data types

    Object: Used to store collections of data.
let person = {
  name: 'Alice',
  age: 30,
};
console.log(person); // {name: "Alice", age: 30}

    Array: An ordered collection of data.
let numbers = [1, 2, 3, 4, 5];
console.log(numbers);


    Function: A callable object.
function greet() {
  console.log('Hello!');
}

let add = function (a, b) {
  return a + b;
};

greet(); // "Hello!"
console.log(add(2, 3)); // 5

    Date: Represents dates and times.
let today = new Date().toLocaleTimeString();
console.log(today);

    RegExp: Represents regular expressions.
    Map: A collection of keyed data items.
    Set: A collection of unique values.



